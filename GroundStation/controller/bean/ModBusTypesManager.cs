///////////////////////////////////////////////////////////
//  operation_group.cs
//  Implementation of the Class operation_group
//  Generated by Enterprise Architect
//  Created on:      16-фев-2013 16:43:27
//  Original author: Ostrovskiy Ihor
///////////////////////////////////////////////////////////
using System.Data;
using System;
using Npgsql;
using log4net;
using log4net.Config;

namespace controller {
	/// <summary>
	/// Типи данних модбас
	/// </summary>
	public class ModBusTypesManager {

        public static readonly ILog log = LogManager.GetLogger(typeof(ModBusTypesManager));
        private DataSet ds = new DataSet();
        NpgsqlDataAdapter da;

		/// <summary>
		/// Ідентифікатор
		/// </summary>
		public int id;
		public string Name;
        public int modbus_register_count;

		public ModBusTypesManager(){

		}

        public DataTable getModBusTypes()
        {
            NpgsqlConnection conn = ConnectionManager.getConnection();
            try
            {
                string sql = "SELECT * FROM modbus_types ORDER BY ID";
                // data adapter making request from our connection
                da = new NpgsqlDataAdapter(sql, conn);
                // i always reset DataSet before i do something with it.... i don't know why :-)
                ds.Reset();
                // filling DataSet with result from NpgsqlDataAdapter
                da.Fill(ds);

                return ds.Tables[0];
            }
            catch (Exception e)
            {
                log.Error(e.Message, e);
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return null;
        }

        ~ModBusTypesManager()
        {

		}

		public virtual void Dispose(){

		}

    }//end OperationGroup

}//end namespace GraundStationDB