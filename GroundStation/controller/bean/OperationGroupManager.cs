///////////////////////////////////////////////////////////
//  operation_group.cs
//  Implementation of the Class operation_group
//  Generated by Enterprise Architect
//  Created on:      16-фев-2013 16:43:27
//  Original author: Ostrovskiy Ihor
///////////////////////////////////////////////////////////
using System.Data;
using System;
using Npgsql;
using log4net;
using log4net.Config;
using System.Linq;
using GroundStation.model.entity.telerik;

namespace controller
{
    /// <summary>
    /// Групи операцій для індевідуального сеансу звязку
    /// </summary>
    public class OperationGroupManager
    {

        public static readonly ILog log = LogManager.GetLogger(typeof(OperationGroupManager));
        private DataSet ds = new DataSet();
        NpgsqlDataAdapter da;
        SessionOperationListManager solDao = new SessionOperationListManager();

        /// <summary>
        /// Дата створення
        /// </summary>
        public DateTime created_at;

        public DataTable getOperationGroup()
        {
            NpgsqlConnection conn = ConnectionManager.getConnection();
            try
            {
                string sql = "SELECT * FROM operation_group";
                // data adapter making request from our connection
                da = new NpgsqlDataAdapter(sql, conn);
                // i always reset DataSet before i do something with it.... i don't know why :-)
                ds.Reset();
                // filling DataSet with result from NpgsqlDataAdapter
                da.Fill(ds);

                return ds.Tables[0];
            }
            catch (Exception e)
            {
                log.Error(e.Message, e);
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return null;
        }

        public Operation_group getOperationGroup(long _id)
        {
            try
            {
                return ConnectionManager.getEntities().Operation_groups.Where(og => og.Id == _id).FirstOrDefault();
            }
            catch (Exception e)
            {
                log.Error(e.Message, e);
            }
            return null;
        }

        public long addOperationGroup(Operation_group og)
        {
            try
            {
                ConnectionManager.getEntities().Add(og);
                //ConnectionManager.getEntities().SaveChanges();
                ConnectionManager.getEntities().FlushChanges();
                return og.Id;
            }
            catch (Exception e)
            {
                log.Error(e.Message, e);
            }

            return -1;
        }

        public Boolean deleteOperationGroup(int id_)
        {
            NpgsqlConnection conn = ConnectionManager.getConnection();
            try
            {
                string sql = "DELETE FROM operation_group WHERE id=:id";
                NpgsqlCommand cmd = new NpgsqlCommand(sql, conn);

                cmd.Parameters.Add(":id", NpgsqlTypes.NpgsqlDbType.Smallint).Value = id_;

                cmd.ExecuteNonQuery();
                return true;
            }
            catch (Exception e)
            {
                log.Error(e.Message, e);
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return false;
        }
    }//end OperationGroup

}//end namespace GraundStationDB